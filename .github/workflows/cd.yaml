name: Buildear y Pushear Imagenes de Docker al crear un Tag o Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'release-*'

permissions:
  contents: write 

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract tag information
      id: tag_info
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # Extraer versión semántica si es posible
        if [[ $TAG_NAME =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          VERSION=${BASH_REMATCH[1]}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "MAJOR=${BASH_REMATCH[1]%%.*}" >> $GITHUB_OUTPUT
          
          # Para versiones semánticas, también extraer major y major.minor
          MINOR=${VERSION%.*}
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Create .env file
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "SALT_ROUNDS=${{ secrets.SALT_ROUNDS }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> .env

    - name: Build Docker images
      run: docker compose -f compose.build.yaml build

    - name: Push images with multiple tags
      run: |
        SERVICES=$(docker compose config --services)

        for service in $SERVICES; do
          # Obtener el nombre base de la imagen
          IMAGE_NAME=$(docker compose config | awk -v svc="$service" '
            $0 ~ "^  "svc":" {in_service=1}
            in_service && /^\s*image:/ {
              split($2, a, ":");
              print a[1];
              exit
            }
          ')

          excluded_images=("postgres" "nginx")

          if [[ ! " ${excluded_images[@]} " =~ " ${IMAGE_NAME} " ]]; then
            NEW_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME"

            if [ -z "$NEW_IMAGE_NAME" ]; then
              NEW_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${service}"
            fi
          
            echo "Processing service: $service"
            echo "Image name: $NEW_IMAGE_NAME"
          
            # Taggear con múltiples tags
            docker tag "${IMAGE_NAME}" "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.TAG_NAME }}"
            docker tag "${IMAGE_NAME}" "${NEW_IMAGE_NAME}:latest"
          
            # Para versiones semánticas, agregar tags adicionales
            if [[ '${{ steps.tag_info.outputs.VERSION }}' != '${{ steps.tag_info.outputs.TAG_NAME }}' ]]; then
              docker tag "${IMAGE_NAME}" "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.VERSION }}"
              docker tag "${IMAGE_NAME}" "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.MINOR }}"
            fi
            
            # Push de todos los tags
            docker push "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.TAG_NAME }}"
            docker push "${NEW_IMAGE_NAME}:latest"
            
            if [[ '${{ steps.tag_info.outputs.VERSION }}' != '${{ steps.tag_info.outputs.TAG_NAME }}' ]]; then
              docker push "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.VERSION }}"
              docker push "${NEW_IMAGE_NAME}:${{ steps.tag_info.outputs.MINOR }}"
            fi
            
            echo "Successfully pushed ${IMAGE_NAME} with multiple tags"
          fi
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: ${{ steps.tag_info.outputs.TAG_NAME }}
        name: Release ${{ steps.tag_info.outputs.TAG_NAME }}
        body: |
          Docker images have been built and pushed to Docker Hub:
          
          Images pushed:
          ${{ steps.tag_info.outputs.SERVICES }}
          
          Tags: ${{ steps.tag_info.outputs.TAG_NAME }}, latest${{ steps.tag_info.outputs.VERSION != steps.tag_info.outputs.TAG_NAME && format(', {0}, {1}', steps.tag_info.outputs.VERSION, steps.tag_info.outputs.MINOR) || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}