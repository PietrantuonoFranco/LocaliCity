---
import Layout from '../../../layouts/Layout.astro';

const options = [
  { name:"default-option", value: "", label: "Seleccione lo que quiere solicitar..." },
  { name:"pais-option", value: "pais", label: "País" },
  { name:"provincia-option", value: "provincia", label: "Provincia" },
  { name:"localidad-option", value: "localidad", label: "Localidad" },
]

const formData = {
  tipo: "",
  referencia: "",
  mensaje: "",
  nombre: "",
  provincia: null,
  pais: null,
};

let isOpen = false;
---

<Layout>
  <div class="h-full flex items-center justify-center p-4 md:py-4 md:px-46 lg:px-75">
    <div class="h-full w-full shadow-lg bg-white/50 p-10 lg:px-16 rounded-xl">
      <div class="text-center space-y-2 mb-4">
        <h2 class="text-3xl font-semibold text-gray-900">Crear solicitud</h2>
        <h4 class="text-gray-600">Envianos tu solicitud añadir nuevas localizaciones a nuestro servicio</h4>
      </div>

        <div>
          <form id="login-form" class="space-y-4 grid md:grid-cols-2 gap-x-10">
            <div class="flex flex-col items-center">
              <div class="w-full space-y-2">
                <label for="tipo" class="text-sm font-medium text-gray-700">
                  Tipo
                </label>
                <div class="pb-[3px] focus-within:gradient-border relative">
                  <!-- Select personalizado -->
                  <div class="custom-select">
                    <button 
                      type="button"
                      class="px-4 input w-full text-left flex justify-between items-center"
                      id="custom-select-button"
                      aria-haspopup="listbox"
                      aria-expanded={isOpen}
                      onclick="toggleCustomSelect()"
                    >
                      <span id="custom-select-selected" class="text-gray-500">
                        {options.find(opt => opt.value === formData.tipo)?.label || options[0].label}
                      </span>
                      <svg 
                        class={`w-5 h-5 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
                        viewBox="0 0 20 20" 
                        fill="currentColor"
                      >
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </button>
                    
                    <div 
                      id="custom-select-options"
                      class={`absolute z-10 mt-2 w-full bg-white shadow-lg rounded-xl border-1 border-gray-500 focus:outline-none ${isOpen ? 'block' : 'hidden'}`}
                      role="listbox"
                    >
                      {options.map((option) => (
                        <div
                          class={`px-4 py-2 cursor-pointer hover:bg-gray-100 ${formData.tipo === option.value ? 'bg-gray-100 font-medium' : ''}  ${option.value === "" ? "rounded-t-xl hover:rounded-t-xl" : option.value === "localidad" ? "rounded-b-xl hover:rounded-b-xl" : ""}`}
                          role="option"
                          aria-selected={formData.tipo === option.value}
                          onclick={`selectCustomOption('${option.value}', '${option.label}')`}
                        >
                          {option.label}
                        </div>
                      ))}
                    </div>
                  </div>

                  <input 
                    type="text"
                    class="hidden" 
                    id="tipo" 
                    name="tipo" 
                    value={formData.tipo} 
                  />
                </div>
              </div>

              <div class="w-full space-y-2">
                <label for="nombre" class="text-sm font-medium text-gray-700">
                  Nombre
                </label>
                <div class="pb-[3px] focus-within:gradient-border">
                  <input
                    id="nombre"
                    name="nombre"
                    type="text"
                    placeholder={formData.tipo === "pais" ? "Argentina" : formData.tipo === "provincia" ? "Buenos Aires" : "La Plata"}
                    value={formData.nombre}
                    oninput="handleInputChange"
                    required
                    class="px-4 input"
                  />
                </div>
              </div>

              <div class="w-full space-y-2">
                <label for="pais" class="text-sm font-medium text-gray-700">
                  Pais
                </label>
                <div class="pb-[3px] focus-within:gradient-border">
                  <input
                    id="pais"
                    name="pais"
                    type="text"
                    placeholder="Argentina"
                    value={formData.pais}
                    oninput="handleInputChange"
                    class="px-4 input"
                  />
                </div>
              </div>

              <div class="w-full space-y-2">
                <label for="provincia" class="text-sm font-medium text-gray-700">
                  Provincia
                </label>
                <div class="pb-[3px] focus-within:gradient-border">
                  <input
                    id="provincia"
                    name="provincia"
                    type="text"
                    placeholder="Buenos Aires"
                    value={formData.provincia}
                    oninput="handleInputChange"
                    class="px-4 input"
                  />
                </div>
              </div>
            </div>

            <div class="w-full flex flex-col items-center">
              <div class="w-full space-y-2">
                <label for="referencia" class="text-sm font-medium text-gray-700">
                  Referencia
                </label>
                <div class="pb-[3px] focus-within:gradient-border">
                  <input
                    id="referencia"
                    name="referencia"
                    type="text"
                    placeholder="https://instagram.com/laplata.capital/"
                    value={formData.referencia}
                    oninput="handleInputChange"
                    required
                    class="px-4 input"
                  />
                </div>
              </div>

              <div class="w-full space-y-2">
                <label for="mensaje" class="text-sm font-medium text-gray-700">
                  Mensaje
                </label>
                <div class="pb-[3px] focus-within:gradient-border h-43">
                  <textarea
                    id="mensaje"
                    name="mensaje"
                    placeholder="La Plata es la capital de la provincia argentina de Buenos Aires..."
                    value={formData.mensaje}
                    oninput="handleInputChange"
                    required
                    class="min-h-42.25 px-4 input"
                  />
                </div>
              </div>    
          
              <div class="w-full flex items-center justify-end mt-8">
                <button
                  type="submit"
                  class="w-32 button"
                >
                  Crear
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { createSolicitud } from "../../../api/solicitud";
  import { getCurrentUser } from "../../../api/auth";

  // Variables de estado
  let isOpen = false;
  const formData = {
    tipo: "",
    referencia: "",
    mensaje: "",
    nombre: "",
    provincia: "",
    pais: ""
  };

  declare global {
    interface Window {
      handleInputChange: (e: Event) => void;
      toggleCustomSelect: () => void;
      selectCustomOption: (value: string, label: string) => void;
      handleClickOutside: (event: MouseEvent) => void;
      handleTipoChange: () => void;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const form = document.getElementById("login-form");
    const tipoInput = document.getElementById('tipo') as HTMLInputElement | null;
    const nombreInput = document.getElementById('nombre') as HTMLInputElement | null;
    const referenciaInput = document.getElementById('referencia') as HTMLInputElement | null;
    const paisField = document.getElementById('pais')?.closest<HTMLDivElement>('.space-y-2');
    const provinciaField = document.getElementById('provincia')?.closest<HTMLDivElement>('.space-y-2');

    // Función para manejar cambios en el tipo
    window.handleTipoChange = function() {
      if (!tipoInput || !paisField || !provinciaField) return;
      
      
      const selectedValue = tipoInput.value;
      
      formData.tipo = selectedValue;

      console.log(formData.tipo)
      // Mostrar/ocultar campos según la selección
      switch(selectedValue) {
        case 'pais':
          paisField.style.display = 'none';
          provinciaField.style.display = 'none';
          break;
        case 'provincia':
          paisField.style.display = 'block';
          provinciaField.style.display = 'none';
          break;
        case 'localidad':
          paisField.style.display = 'block';
          provinciaField.style.display = 'block';
          break;
        default:
          paisField.style.display = 'block';
          provinciaField.style.display = 'block';
      }
    };

     // Asignar eventos de cambio a todos los inputs (versión mejorada)
    const assignInputEvents = () => {
      document.querySelectorAll('input, textarea, #tipo').forEach(input => {
        input.addEventListener('input', window.handleInputChange);
        input.addEventListener('change', window.handleInputChange); // Para mayor compatibilidad
      });
    };

    // Inicialización
    assignInputEvents();
    window.handleTipoChange();

    // Función para manejar el envío del formulario
    async function handleSubmit(e: Event) {
      e.preventDefault();

      console.log("click en submit")
      
      try {
        if (!formData.tipo || !formData.mensaje || !formData.nombre) {
          alert('Por favor completa todos los campos requeridos');
          return;
        }

        const usuario = await getCurrentUser();

        
      console.log({usuario: usuario})

        if (usuario) {
          const solicitud = await createSolicitud(
            formData.tipo, 
            formData.nombre, 
            formData.referencia, 
            formData.mensaje, 
            formData.pais, 
            formData.provincia, 
            usuario
          );

          console.log({solicitud: solicitud})

          if (solicitud) {
            window.location.href = "/";
          } 
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    // Asignar eventos
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        handleSubmit(e).catch(error => {
          console.error('Error en handleSubmit:', error);
        });
      });
    }
    
    // Función para manejar cambios en los inputs
    window.handleInputChange = function (e: Event) {
      const target = e.target as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;
      
      if (target.name in formData) {
        const value = target.value;
        const key = target.name as keyof typeof formData;
        
        formData[key] = value;

        console.log({key: key, value: value})

        if (key === 'tipo') {
          window.handleTipoChange();
          if (nombreInput) {
            nombreInput.placeholder = value === "pais" ? "Argentina" : 
                                     value === "provincia" ? "Buenos Aires" : 
                                     "La Plata";
          }
        }
      }
    };

    // Asignar eventos de cambio a todos los inputs
    document.querySelectorAll('input, textarea').forEach(input => {
      input.addEventListener('input', window.handleInputChange);
    });

    // Función para alternar el select personalizado
    window.toggleCustomSelect = function() {
      const options = document.getElementById('custom-select-options');
      const button = document.getElementById('custom-select-button');
      isOpen = !isOpen;
      
      if (options) options.classList.toggle('hidden');
      if (button) button.setAttribute('aria-expanded', isOpen.toString());
      
      if (isOpen) {
        document.addEventListener('click', window.handleClickOutside);
      } else {
        document.removeEventListener('click', window.handleClickOutside);
      }
    };
    
    // Función para seleccionar una opción
    window.selectCustomOption = function(value: string, label: string) {
      formData.tipo = value;
      const hiddenInput = document.getElementById('tipo') as HTMLInputElement;
      if (hiddenInput) hiddenInput.value = value;
      
      const selectedSpan = document.getElementById('custom-select-selected');
      if (selectedSpan) selectedSpan.textContent = label;
      
      // Actualizar el placeholder del campo nombre
      const nombreInput = document.getElementById('nombre') as HTMLInputElement;
      if (nombreInput) {
        nombreInput.placeholder = value === "pais" ? "Argentina" : value === "provincia" ? "Buenos Aires" : "La Plata";
      }
      
      window.toggleCustomSelect();
      window.handleTipoChange();
    };
    
    // Función para manejar clics fuera del select
    window.handleClickOutside = function(event: MouseEvent) {
      const selectContainer = document.querySelector('.custom-select');
      const button = document.getElementById('custom-select-button');
      
      if (selectContainer && !selectContainer.contains(event.target as Node) && 
          button && !button.contains(event.target as Node)) {
        window.toggleCustomSelect();
      }
    };

    // Escuchar cambios en el input oculto
    if (tipoInput) {
      tipoInput.addEventListener('change', window.handleTipoChange);
    }

    // Manejo del toggle de contraseña (si existe)
    const togglePassword = () => {
      const passwordInput = document.getElementById('contrasenia') as HTMLInputElement | null;
      const eyeIcon = document.getElementById('eyeIcon') as HTMLAnchorElement | null;
      
      if (passwordInput && eyeIcon) {
        const isPassword = passwordInput.type === 'password';
        passwordInput.type = isPassword ? 'text' : 'password';
        eyeIcon.innerHTML = isPassword ? 
          `<path d="M10.585 10.587a2 2 0 0 0 2.829 2.828" />
          <path d="M16.681 16.673A8.7 8.7 0 0 1 12 18q-5.4 0-9-6q1.908-3.18 4.32-4.674m2.86-1.146A9 9 0 0 1 12 6q5.4 0 9 6q-1 1.665-2.138 2.87M3 3l18 18" />` : 
          `<path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0-4 0" />
          <path d="M21 12q-3.6 6-9 6t-9-6q3.6-6 9-6t9 6" />`;
      }
    };

    document.getElementById('togglePassword')?.addEventListener('click', togglePassword);
  });
</script>